// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: test.proto

package protobuffer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SaySomethingService_TestRPC_FullMethodName = "/SaySomethingService/TestRPC"
)

// SaySomethingServiceClient is the client API for SaySomethingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SaySomethingServiceClient interface {
	// 定義api名稱，傳入參數與回傳值
	TestRPC(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
}

type saySomethingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSaySomethingServiceClient(cc grpc.ClientConnInterface) SaySomethingServiceClient {
	return &saySomethingServiceClient{cc}
}

func (c *saySomethingServiceClient) TestRPC(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, SaySomethingService_TestRPC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SaySomethingServiceServer is the server API for SaySomethingService service.
// All implementations must embed UnimplementedSaySomethingServiceServer
// for forward compatibility
type SaySomethingServiceServer interface {
	// 定義api名稱，傳入參數與回傳值
	TestRPC(context.Context, *TestRequest) (*TestResponse, error)
	// mustEmbedUnimplementedSaySomethingServiceServer()
}

// UnimplementedSaySomethingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSaySomethingServiceServer struct {
}

func (UnimplementedSaySomethingServiceServer) TestRPC(context.Context, *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestRPC not implemented")
}
func (UnimplementedSaySomethingServiceServer) mustEmbedUnimplementedSaySomethingServiceServer() {}

// UnsafeSaySomethingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SaySomethingServiceServer will
// result in compilation errors.
type UnsafeSaySomethingServiceServer interface {
	mustEmbedUnimplementedSaySomethingServiceServer()
}

func RegisterSaySomethingServiceServer(s grpc.ServiceRegistrar, srv SaySomethingServiceServer) {
	s.RegisterService(&SaySomethingService_ServiceDesc, srv)
}

func _SaySomethingService_TestRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaySomethingServiceServer).TestRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SaySomethingService_TestRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaySomethingServiceServer).TestRPC(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SaySomethingService_ServiceDesc is the grpc.ServiceDesc for SaySomethingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SaySomethingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SaySomethingService",
	HandlerType: (*SaySomethingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestRPC",
			Handler:    _SaySomethingService_TestRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}
